---
# There are prerequisites for SR-IOV support, including IOMMU enabled,
# passthrough, and driver support. Many drivers support SR-IOV, but some
# require out-of-kernel drivers (ie. Mellanox) and some don't support sysfs.

- name: Fail on incompatible CPU architecture
  fail:
    msg: "Detected {{ cpu_vendor }} CPU not supported! Must be {{ supported_cpus }}."
  when:
    - cpu_vendor not in supported_cpus

- name: Register IOMMU DMARs
  find: paths=/sys/class/iommu file_type=directory patterns="*"
  register: iommus
  
# We need to
# - Check to see if IOMMU is already enabled. If not, let's check grub (and break out iommu/pt)

- name: Check GRUB defaults and enable IOMMU if necessary
  lineinfile:
    path: /etc/default/grub
    backrefs: true
    regexp: '^GRUB_CMDLINE_LINUX="((?!.*{{ iommu_kernel_cmds }}).*)"$'
    line: 'GRUB_CMDLINE_LINUX="\1 {{ iommu_kernel_cmds }}"'
    backup: yes
  register: grub

- name: Update GRUB config (Ubuntu)
  command: update-grub
  when:
    - ansible_distribution == 'Ubuntu'

- name: Update GRUB config (CentOS)
  command: grub2-mkconfig -o /boot/grub2/grub.cfg
  when:
    - ansible_os_family == "RedHat"

# If grub_reboot is not enabled, user will be prompted to reboot the host(s) manually
- name: Fail if IOMMU is not enabled
  fail:
    msg:
      - "IOMMU is not currently enabled in the kernel but has been configured. Please reboot the host manually and rerun Express."
  when: 
    - iommus.examined < 1
    - not grub_reboot

# If grub_reboot is enabled, Express will reboot the host(s) and wait for their return
- name: Reboot to enable IOMMU
  reboot:
    msg: "Platform9 - Host is being rebooted!"
    reboot_timeout: "{{ reboot_wait }}"
    post_reboot_delay: 30
    test_command: uname
  when:
    - iommus.examined < 1
    - grub_reboot
  register: reboot_results

- debug:
    msg: "Reboot results: {{ reboot_results | default('N/A') }}"

- set_fact:
    rebooted: "{{ reboot_results.rebooted | default('false') }}"
 
# Recheck IOMMUs
- name: Register IOMMU DMARs (post-reboot)
  find: paths=/sys/class/iommu file_type=directory patterns="*"
  register: iommu_recheck

# If IOMMU is not enabled post-reboot, bail out.
- name: Fail hard if IOMMU is not enabled
  fail:
    msg:
      - "IOMMU is not currently enabled in the kernel but has been configured. Please reboot the host and rerun Express."
  when:
    - iommu_recheck.examined < 1

# Warn if NIC driver is not supported
- name: Determine driver bound to NICs
  find:
    paths: "/sys/class/net/{{ item.split(':')[1] }}/device/driver/module/drivers"
    file_type: link
  register: find_result
  with_items: "{{ physical_device_mappings }}"

- set_fact:
    nic_driver: "{{ (item.path | basename).split(':')[1] }}"
  with_items: "{{ find_result.results[0].files }}"

- debug:
    msg:
      - "The {{ nic_driver }} NIC driver is not currently supported by Platform9."
  when: nic_driver not in supported_nic_drivers
